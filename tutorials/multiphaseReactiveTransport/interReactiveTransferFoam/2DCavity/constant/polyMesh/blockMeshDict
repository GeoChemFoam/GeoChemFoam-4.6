/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1e-3;

 

lx1 2;
lx2 4;
lx3 6;
ly 1;
ly2 -2;

 

vertices
(
    (0          0     0) //0
    ($lx1     0     0) //1
    ($lx1     $ly     0) //2
    (0          $ly     0) //3
    (0          0     1) //4
    ($lx1     0     1 ) //5
    ($lx1     $ly     1 ) //6
    (0          $ly     1 ) //7

 

    ($lx2     0     0) //8
    ($lx2     $ly    0) //9
    ($lx2     0     1 ) //10
    ($lx2     $ly     1 ) //11

 

    ($lx1     $ly2     0) //12
    ($lx2     $ly2     0) //13
    ($lx1     $ly2     1 ) //14
    ($lx2     $ly2     1 ) //15

 

    ($lx3     0     0) //16
    ($lx3     $ly    0) //17
    ($lx3     0     1) //18
    ($lx3     $ly     1) //19
);

 

blocks
(
    hex (0 1 2 3 4 5 6 7)    (20 10 1) simpleGrading (1 1 1)
    hex (1 8 9 2 5 10 11 6)     (20 10 1) simpleGrading (1 1 1)
    hex (12 13 8 1 14 15 10 5)     (20 20 1) simpleGrading (1 1 1)
    hex (8 16 17 9 10 18 19 11) (20 10 1) simpleGrading (1 1 1)
);

 

edges();

 

boundary
(
    right
    {
        type patch;
        faces
        (
          (18 16 17 19)
        );
    }
    left
    {
        type patch;
        faces
        (
            (0 4 7 3)
        );
    }
    top
    {
        type wall;
        faces
        (
            (7 6 2 3)
        (6 11 9 2)
        (11 19 17 9)
        );
    }
    bottom
    {
        type wall;
        faces
        (
            (1 5 4 0)
            (14 15 13 12)
        (14 12 1 5)
        (15 13 8 10)
        (10 18 16 8)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
        (5 10 11 6)
        (1 8 9 2)
        (12 13 8 1)
        (14 15 10 5)
        (8 16 17 9)
        (10 18 19 11)
        );
    }
);

 

mergePatchPairs();

 

// ************************************************************************* //
 
